{"version":3,"sources":["components/Navbar.js","components/Footer.js","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","state","burger","active","burgerOnClick","e","_this","setState","Object","objectSpread","react_default","a","createElement","className","onClick","this","concat","href","Component","Footer","props","Card","_ref","link","alt","src","App","imgs","components_Navbar","title","map","item","index","components_Card","key","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MAoDeA,6MAhDXC,MAAQ,CACJC,OAAQ,CACJC,QAAQ,MAIhBC,cAAgB,SAAAC,GACZC,EAAKC,SAAS,CACVL,OAAOM,OAAAC,EAAA,EAAAD,CAAA,GACAF,EAAKL,MAAMC,OADZ,CAEFC,QAASG,EAAKL,MAAMC,OAAOC,oFAOnC,OACIO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAEXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAEfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,UAAQE,QAASC,KAAKX,eAClBM,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAb,UAORH,EAAAC,EAAAC,cAAA,OACIC,UAAS,gBAAAG,OACLD,KAAKd,MAAMC,OAAOC,OAClB,sBACE,OAGNO,EAAAC,EAAAC,cAAA,KAAGK,KAAK,KAAR,SACAP,EAAAC,EAAAC,cAAA,KAAGK,KAAK,KAAR,WACAP,EAAAC,EAAAC,cAAA,KAAGK,KAAK,KAAR,mBA1CCC,aCKNC,EALA,SAAAC,GAAK,OAChBV,EAAAC,EAAAC,cAAA,WAASC,UAAU,UACfH,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,kBAAH,OAAmBF,EAAAC,EAAAC,cAAA,KAAGK,KAAK,gCAAR,aAAnB,4ECGOI,EALF,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,KAAMC,EAARF,EAAQE,IAAR,OACTd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKa,IAAKF,EAAMC,IAAKA,MC+BdE,6MA7BbzB,MAAQ,CACN0B,KAAM,CACJ,YACA,YACA,sFAIF,OACEjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACgB,EAAD,CAAQC,MAAM,UAIdnB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YAEZE,KAAKd,MAAM0B,KAAKG,IAAI,SAACC,EAAMC,GACzB,OAAQtB,EAAAC,EAAAC,cAACqB,EAAD,CAAMC,IAAKF,EAAOT,KAAI,iBAAAP,OAAmBe,QAMvDrB,EAAAC,EAAAC,cAACuB,EAAD,cAxBUjB,aCOEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8f3a7776.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Navbar extends Component {\n\n    state = {\n        burger: {\n            active: false,\n        }\n    }\n\n    burgerOnClick = e => {\n        this.setState({\n            burger: {\n                ...this.state.burger,\n                active: !this.state.burger.active\n            }\n        })\n        // console.log(this.state.burger)\n    }\n\n    render() {\n        return (\n            <nav className=\"Navbar\">\n\n                <div className=\"Navbar__logo\"></div>\n                    \n                <div className=\"Navbar__burger\">\n                    <button onClick={this.burgerOnClick}>\n                        <i className=\"material-icons\">\n                            menu\n                        </i>\n                    </button>\n                </div>\n\n\n                <div \n                    className={`Navbar__menu ${\n                        this.state.burger.active?\n                        'Navbar__menu-active' \n                        : null\n                    }`}\n                >\n                    <a href=\"/\">About</a>\n                    <a href=\"/\">Sign up</a>\n                    <a href=\"/\">Log in</a>\n                </div>\n\n            </nav>\n        )\n    }\n}\n\nexport default Navbar","import React from 'react'\n\nconst Footer = props =>\n    <section className=\"Footer\">\n        <p><b>Memer</b> by <a href=\"https://github.com/damianb53\">damianb53</a>. The website contains images from 9gag.com, I do not own any of this.</p>\n    </section>\n\nexport default Footer","import React from 'react'\n\nconst Card = ({link, alt}) =>\n    <div className=\"Card\">\n        <img src={link} alt={alt}/>\n    </div>\n\nexport default Card","import React, { Component } from 'react'\nimport Navbar from './components/Navbar'\nimport Footer from './components/Footer'\nimport Card from './components/Card'\n\nclass App extends Component {\n  state = {\n    imgs: [\n      '1900/1900',\n      '1300/1500',\n      '1400/1600'\n    ]\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar title=\"Memer\"/>\n\n        {/* pack timeline in the container */}\n\n        <main className=\"Timeline\">\n          {\n            this.state.imgs.map((item, index) => {\n              return (<Card key={index} link={`//unsplash.it/${item}`} />)\n            })\n          }\n          {/* <Card link=\"https://img-9gag-fun.9cache.com/photo/az9AA7b_460swp.webp\"/> */}\n        </main>\n\n        <Footer/>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\nserviceWorker.unregister()\n"],"sourceRoot":""}